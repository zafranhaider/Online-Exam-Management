# coding: utf-8

"""
    securityapi

    The security APIs help you detect and block security threats.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cloudmersive_security_api_client.api_client import ApiClient


class ContentThreatDetectionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def content_threat_detection_automatic_threat_detection_string(self, value, **kwargs):  # noqa: E501
        """Automatically detect threats in an input string  # noqa: E501

        Auto-detects a wide range of threat types in input string, including Cross-Site Scripting (XSS), SQL Injection (SQLI), XML External Entitites (XXE), Server-side Request Forgeries (SSRF), and JSON Insecure Deserialization (JID).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_threat_detection_automatic_threat_detection_string(value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str value: User-facing text input. (required)
        :return: StringAutomaticThreatDetection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_threat_detection_automatic_threat_detection_string_with_http_info(value, **kwargs)  # noqa: E501
        else:
            (data) = self.content_threat_detection_automatic_threat_detection_string_with_http_info(value, **kwargs)  # noqa: E501
            return data

    def content_threat_detection_automatic_threat_detection_string_with_http_info(self, value, **kwargs):  # noqa: E501
        """Automatically detect threats in an input string  # noqa: E501

        Auto-detects a wide range of threat types in input string, including Cross-Site Scripting (XSS), SQL Injection (SQLI), XML External Entitites (XXE), Server-side Request Forgeries (SSRF), and JSON Insecure Deserialization (JID).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_threat_detection_automatic_threat_detection_string_with_http_info(value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str value: User-facing text input. (required)
        :return: StringAutomaticThreatDetection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_threat_detection_automatic_threat_detection_string" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `content_threat_detection_automatic_threat_detection_string`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'value' in params:
            body_params = params['value']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/security/threat-detection/content/automatic/detect/string', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringAutomaticThreatDetection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_threat_detection_check_sql_injection_string(self, value, **kwargs):  # noqa: E501
        """Check text input for SQL Injection (SQLI) attacks  # noqa: E501

        Detects SQL Injection (SQLI) attacks from text input.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_threat_detection_check_sql_injection_string(value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str value: User-facing text input. (required)
        :return: StringSqlInjectionDetectionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_threat_detection_check_sql_injection_string_with_http_info(value, **kwargs)  # noqa: E501
        else:
            (data) = self.content_threat_detection_check_sql_injection_string_with_http_info(value, **kwargs)  # noqa: E501
            return data

    def content_threat_detection_check_sql_injection_string_with_http_info(self, value, **kwargs):  # noqa: E501
        """Check text input for SQL Injection (SQLI) attacks  # noqa: E501

        Detects SQL Injection (SQLI) attacks from text input.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_threat_detection_check_sql_injection_string_with_http_info(value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str value: User-facing text input. (required)
        :return: StringSqlInjectionDetectionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_threat_detection_check_sql_injection_string" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `content_threat_detection_check_sql_injection_string`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'value' in params:
            body_params = params['value']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/security/threat-detection/content/sql-injection/detect/string', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringSqlInjectionDetectionResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_threat_detection_check_xxe(self, value, **kwargs):  # noqa: E501
        """Protect text input from XML External Entity (XXE) attacks  # noqa: E501

        Detects XXE (XML External Entity) attacks from XML text input.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_threat_detection_check_xxe(value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str value: User-facing text input. (required)
        :return: StringXxeDetectionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_threat_detection_check_xxe_with_http_info(value, **kwargs)  # noqa: E501
        else:
            (data) = self.content_threat_detection_check_xxe_with_http_info(value, **kwargs)  # noqa: E501
            return data

    def content_threat_detection_check_xxe_with_http_info(self, value, **kwargs):  # noqa: E501
        """Protect text input from XML External Entity (XXE) attacks  # noqa: E501

        Detects XXE (XML External Entity) attacks from XML text input.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_threat_detection_check_xxe_with_http_info(value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str value: User-facing text input. (required)
        :return: StringXxeDetectionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_threat_detection_check_xxe" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `content_threat_detection_check_xxe`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'value' in params:
            body_params = params['value']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/security/threat-detection/content/xxe/detect/xml/string', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringXxeDetectionResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_threat_detection_detect_insecure_deserialization_json_string(self, value, **kwargs):  # noqa: E501
        """Detect Insecure Deserialization JSON (JID) attacks in a string  # noqa: E501

        Detects Insecure Deserialization JSON (JID) attacks from text input.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_threat_detection_detect_insecure_deserialization_json_string(value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str value: User-facing text input. (required)
        :return: StringInsecureDeserializationJsonDetection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_threat_detection_detect_insecure_deserialization_json_string_with_http_info(value, **kwargs)  # noqa: E501
        else:
            (data) = self.content_threat_detection_detect_insecure_deserialization_json_string_with_http_info(value, **kwargs)  # noqa: E501
            return data

    def content_threat_detection_detect_insecure_deserialization_json_string_with_http_info(self, value, **kwargs):  # noqa: E501
        """Detect Insecure Deserialization JSON (JID) attacks in a string  # noqa: E501

        Detects Insecure Deserialization JSON (JID) attacks from text input.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_threat_detection_detect_insecure_deserialization_json_string_with_http_info(value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str value: User-facing text input. (required)
        :return: StringInsecureDeserializationJsonDetection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_threat_detection_detect_insecure_deserialization_json_string" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `content_threat_detection_detect_insecure_deserialization_json_string`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'value' in params:
            body_params = params['value']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/security/threat-detection/content/insecure-deserialization/json/detect/string', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringInsecureDeserializationJsonDetection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_threat_detection_protect_xss(self, value, **kwargs):  # noqa: E501
        """Protect text input from Cross-Site-Scripting (XSS) attacks through normalization  # noqa: E501

        Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_threat_detection_protect_xss(value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str value: User-facing text input. (required)
        :return: StringXssProtectionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_threat_detection_protect_xss_with_http_info(value, **kwargs)  # noqa: E501
        else:
            (data) = self.content_threat_detection_protect_xss_with_http_info(value, **kwargs)  # noqa: E501
            return data

    def content_threat_detection_protect_xss_with_http_info(self, value, **kwargs):  # noqa: E501
        """Protect text input from Cross-Site-Scripting (XSS) attacks through normalization  # noqa: E501

        Detects and removes XSS (Cross-Site-Scripting) attacks from text input through normalization.  Returns the normalized result, as well as information on whether the original input contained an XSS risk.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_threat_detection_protect_xss_with_http_info(value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str value: User-facing text input. (required)
        :return: StringXssProtectionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_threat_detection_protect_xss" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `content_threat_detection_protect_xss`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'value' in params:
            body_params = params['value']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Apikey']  # noqa: E501

        return self.api_client.call_api(
            '/security/threat-detection/content/xss/detect/string', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringXssProtectionResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
